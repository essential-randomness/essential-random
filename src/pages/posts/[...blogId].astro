---
import { getCollection } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import PostStatus from "../../components/PostStatus.astro";

export async function getStaticPaths() {
  const posts = await getCollection("posts");
  return Promise.all(
    posts.map(async (post) => ({
      params: {
        blogId: post.slug,
      },
      props: {
        Content: (await post.render()).Content,
        data: post.data,
      },
    }))
  );
}

const { Content, data } = Astro.props;
---

<Layout
  title={data.og_title ? data.og_title : `${data.title} â€“ Essential Randomness`}
  preview={data.og_image?.src}
  description={data.og_description}
>
  <main class="post">
    <h1 set:html={data.title} />
    {data.tagline && <h2 class="tagline">{data.tagline}</h2>}
    <div>
      Published on <date
        >{
          data.created_at.toLocaleDateString("en-US", {
            year: "numeric",
            month: "long",
            day: "numeric",
          })
        }</date
      >
    </div>
    <PostStatus status={data.status} />
    <h2 id="table-of-contents">Table of Contents</h2>
    <Content />
    <dialog class="footnote">
      <div>
        <div class="content"></div>
        <form method="dialog">
          <button>Close</button>
        </form>
      </div>
    </dialog>
  </main>

  <style is:global>
    figure {
      max-width: 100%;
      max-height: 900px;
      height: auto;
      width: auto;
      margin: 0 auto;
      display: block;

      :not(&) > img {
        padding-block: 1.5rem;
      }

      p {
        margin: 0;
        font-size: smaller;
      }
      figcaption p {
        padding-inline: min(3rem, 5%);
        text-align: center;
      }
    }

    #table-of-contents + nav > ol {
      border: 2px solid black;
      border-radius: 16px;
      padding: 30px 50px;
      display: flex;
      flex-direction: column;
      gap: 5px;
      height: 100%;
      box-shadow: var(--box-shadow-deep);
      margin-bottom: 50px;

      li {
        margin-bottom: 0;
        display: flex;
        flex-direction: column;
        gap: 5px;

        ol {
          padding-inline-start: 20px;
        }
      }
    }

    img {
      max-width: 100%;
      max-height: 900px;
      height: auto;
      width: auto;
      margin: 0 auto;
      display: block;
    }

    .custom-emoji {
      display: inline-block;
      padding: 0 5px;
      height: 30px;
      vertical-align: middle;

      & + .custom-emoji {
        padding-inline-start: 0;
      }
    }

    h1:has(~ .tagline) {
      margin-bottom: 0;
    }

    h2 {
      margin-block-start: 2.5rem;
    }
    :where(h1, h2, h3, h4, h5) code {
      margin-right: 5px;
      margin-left: 5px;
    }

    .tagline {
      color: gray;
      margin-top: 0;
    }

    .astro-code {
      padding: 25px 30px;
    }
    .footnotes {
      border-top: 2px dashed black;
      margin-top: 4rem;
      margin-bottom: 3rem;
      padding: 0 20px;

      & ol ::marker {
        font-weight: 800;
      }
    }
    blockquote {
      border-left: 5px solid black;
      margin-block: 20px;
      padding: 1px 15px;
      border-radius: 15px;
    }

    dialog.footnote {
      padding: 0;
      box-shadow: var(--box-shadow-deep);
      border: 2px solid black;
      overscroll-behavior: none;
      max-width: 800px;
      margin-inline: 10%;

      & > div {
        padding: 10px 20px;
      }
      button {
        box-shadow: var(--box-shadow);
        border: 2px solid black;
      }

      &::backdrop {
        background-color: rgba(0, 0, 0, 0.65);
        overscroll-behavior: none;
      }
    }
  </style>

  <script>
    import { annotate } from "rough-notation";

    const container = document.querySelector<HTMLDivElement>(".rough-draft");
    const title = container?.querySelector<HTMLDivElement>("span");
    if (container) {
      const annotation = annotate(container, {
        type: "box",
        animate: false,
        padding: -4,
      });
      annotation.show();
    }
    if (title) {
      const annotation = annotate(title, {
        type: "highlight",
        animate: false,
        color: "lightgray",
        padding: -4,
        multiline: true,
      });
      annotation.show();
    }
  </script>

  <script>
    const footnoteLinks = document.querySelectorAll<HTMLAnchorElement>(
      "a[data-footnote-ref]"
    );
    for (let footnoteLink of footnoteLinks) {
      footnoteLink.addEventListener("click", (e) => {
        e.preventDefault();
        const footnote = document
          .querySelector(`${footnoteLink.hash} p`)
          ?.cloneNode(true);
        if (!footnote) {
          console.error(
            `Why is there no footnote for hash ${footnoteLink.hash}???`
          );
          return;
        }
        const backLink = (footnote as HTMLParagraphElement).querySelector(
          "a[data-footnote-backref]"
        );
        backLink && footnote.removeChild(backLink);
        const modal =
          document.querySelector<HTMLDialogElement>("dialog.footnote");
        modal?.querySelector(".content")?.appendChild(footnote);
        modal?.showModal();
        // Code to prevent scroll START
        document.body.style.overflow = "hidden";
        // Code to prevent scroll END
        modal?.addEventListener("close", () => {
          footnote.parentElement?.removeChild(footnote);
          document.body.style.overflow = "unset";
        });
        modal?.addEventListener("click", (e) => {
          if (e.target == modal) {
            modal.close();
          }
        });
      });
    }
  </script>
</Layout>

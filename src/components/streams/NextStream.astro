---
import { getCollection } from "astro:content";
import { filterStreamsByTime } from "./utils";

interface Props {
  startAt: Date;
  endAt: Date;
}
const { startAt, endAt } = Astro.props;
const streams = await getCollection(
  "streams",
  filterStreamsByTime({
    after: new Date(Date.now()),
    before: endAt,
  })
);

const dateOptions = {
  timeStyle: "short",
  dateStyle: "long",
};
---

<local-time>
  <next-stream
    passed="true"
    streams={JSON.stringify({
      streams: streams.map((stream) => ({
        title: stream.data.title,
        scheduled_at: stream.data.scheduled_at,
        private: stream.data.tags.includes("$upporters-only"),
      })),
    })}
  >
    <div class="next-stream">
      <div class="next smallcaps">The next stream will be</div>
      <div class="current smallcaps">Currently streaming</div>
      <div class="title"></div><div class="time-details">
        <span class="next">on</span><span class="current">started at</span>
        <time data-datetime-options={JSON.stringify(dateOptions)}></time>
        <span class="location"></span>
      </div>
    </div>
    <div class="no-stream">
      The last stream in this series has already passed. Recordings might be
      available on <a href="https://twitch.tv/essentialrandomness">Twitch</a> or


      <a href="https://www.youtube.com/channel/UCI_NX0PeoiWiMsHIFH0TBsw"
        >YouTube</a
      >.
    </div>
  </next-stream>
</local-time>

<style>
  next-stream {
    &[passed="true"] {
      .next-stream {
        display: none;
      }
    }
    &[passed="false"] {
      .no-stream {
        display: none;
      }
    }

    &.current .next {
      display: none;
    }

    &:not(.current) .current {
      display: none;
    }
  }

  .smallcaps {
    text-transform: uppercase;
    font-weight: 500;
    letter-spacing: 1px;
  }
  .title {
    font-weight: bold;
    font-size: 26px;
    line-height: 1em;
  }
  .time-details {
    font-size: 22px;
  }
</style>

<script>
  import { findNextStream, isCurrentStream } from "./utils";
  // TODO: turn into webcomponent
  const nextStreamsTag = document.querySelector("next-stream")!;
  const { streams } = JSON.parse(nextStreamsTag.getAttribute("streams")!);
  const nextStream = findNextStream(streams) as typeof streams;
  if (nextStream) {
    nextStreamsTag.querySelector(".title")!.innerHTML = nextStream.title;
    const timeTag = nextStreamsTag.querySelector("time") as HTMLTimeElement;
    timeTag.innerHTML = new Date(nextStream.scheduled_at).toLocaleString(
      "en-US",
      {
        timeZone: "US/Pacific",
        ...JSON.parse(timeTag.dataset!["datetimeOptions"]!),
      }
    );
    timeTag.setAttribute("datetime", nextStream.scheduled_at);
    nextStreamsTag.setAttribute("passed", "false");

    nextStreamsTag.classList.toggle("current", isCurrentStream(nextStream));

    nextStreamsTag.querySelector(".location")!.innerHTML = !nextStream.private
      ? `on <a href="https://twitch.tv/essentialrandomness">Twitch</a>`
      : `in our <a href="https://www.patreon.com/essentialrandomness">[[$upporters lair]]</a>`;
  }
</script>
<script>
  import "./LocalTime.ts";
</script>

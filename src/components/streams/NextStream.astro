---
import { getCollection } from "astro:content";

interface Props {
  startAt: Date;
  endAt: Date;
}
const { startAt, endAt } = Astro.props;
const streams = await getCollection(
  "streams",
  (stream) =>
    stream.data.scheduled_at > startAt && stream.data.scheduled_at < endAt
);

const dateOptions = {
  timeStyle: "short",
  dateStyle: "long",
};
---

<!-- <div class="no-stream">The last stream in this series is already passed</div> -->
<local-time>
  <next-stream passed="true">
    <div class="next-stream">
      <div class="smallcaps">The next stream will be</div><div class="title">
      </div><div class="time-details">
        on <time data-datetime-options={JSON.stringify(dateOptions)}></time>
         on <a href="https://twitch.tv/essentialrandomness">Twitch</a>
      </div>
    </div>
    <div class="no-stream">
      The last stream in this series is already passed. Recordings might be
      available on Twitch or YouTube.
    </div>
  </next-stream>
</local-time>

<style>
  next-stream {
    &[passed="true"] {
      .next-stream {
        display: none;
      }
    }
    &[passed="false"] {
      .no-stream {
        display: none;
      }
    }
  }

  .smallcaps {
    text-transform: uppercase;
    font-weight: 500;
    letter-spacing: 1px;
  }
  .title {
    font-weight: bold;
    font-size: 26px;
    line-height: 1em;
  }
  .time-details {
    font-size: 22px;
  }
</style>

<script
  define:vars={{
    streams: streams.map((stream) => ({
      title: stream.data.title,
      scheduled_at: stream.data.scheduled_at,
    })),
    dateOptions,
  }}
>
  let nextStream = null;
  for (let stream of streams) {
    const streamDate = new Date(stream.scheduled_at);
    if (
      streamDate > Date.now() &&
      (nextStream === null || new Date(nextStream.scheduled_at) > streamDate)
    ) {
      nextStream = stream;
    }
  }
  if (nextStream) {
    document.querySelector("next-stream .title").innerHTML = nextStream.title;
    document.querySelector("next-stream time").innerHTML = new Date(
      nextStream.scheduled_at
    ).toLocaleString("en-US", {
      timeZone: "US/Pacific",
      ...dateOptions,
    });
    document
      .querySelector("next-stream time")
      .setAttribute("datetime", nextStream.scheduled_at);
    document.querySelector("next-stream").setAttribute("passed", false);
  }
</script>
<script>
  import "./LocalTime.ts";
</script>

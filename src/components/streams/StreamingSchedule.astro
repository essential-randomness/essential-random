---
import { filterStreamsByTime } from "./utils";
import { getCollection } from "astro:content";

interface Props {
  startAt: Date;
  endAt: Date;
}
const { startAt, endAt } = Astro.props;
const streams = await getCollection(
  "streams",
  filterStreamsByTime({
    after: startAt,
    before: endAt,
  })
);
const dateOptions = {
  month: "short",
  day: "numeric",
} as const;
const timeOptions = {
  timeStyle: "short",
} as const;
---

<local-time>
  <details-toggle>
    <ul>
      {
        streams.map((stream) => {
          return (
            <li data-stream-slug={stream.slug}>
              <date
                datetime={stream.data.scheduled_at.toISOString()}
                data-datetime-options={JSON.stringify(dateOptions)}
              >
                {stream.data.scheduled_at.toLocaleString("en-US", {
                  timeZone: "US/Pacific",
                  ...dateOptions,
                })}
              </date>
              <time
                datetime={stream.data.scheduled_at.toISOString()}
                data-datetime-options={JSON.stringify(timeOptions)}
              >
                {stream.data.scheduled_at.toLocaleString("en-US", {
                  timeZone: "US/Pacific",
                  ...timeOptions,
                })}
              </time>

              <details open>
                <summary set:html={stream.data.title} />
                <div set:html={stream.data.description} />
                {!!stream.data.tags.length && (
                  <div class="tags">
                    {stream.data.tags.map((tag) => (
                      <div
                        class="badge"
                        data-name={tag.toLowerCase().replace(" ", "_")}
                      >
                        {tag}
                      </div>
                    ))}
                  </div>
                )}
              </details>
            </li>
          );
        })
      }
    </ul>
     All times and topics are subject to change
  </details-toggle>
</local-time>

<style>
  ul {
    border: 1px solid #e3e3e3;
    padding: 0;
    margin: 0;
    max-width: 1000px;
    border-radius: 4px;
  }
  li {
    list-style: none;
    padding: 15px 20px;
    margin: 0;
    position: relative;
  }

  li + li {
    border-top: 1px solid #f1f1f1;
  }

  summary {
    font-weight: bold;
    cursor: pointer;
  }
  details {
    width: 100%;
  }
  .passed {
    color: grey;

    .badge {
      color: grey;
      border-color: grey;
    }
  }

  ul :global(.next)::before {
    content: "ðŸŒŸ next up ðŸŒŸ";
    position: absolute;
    border-radius: 10px;
    top: 0px;
    left: 9px;
    transform: translateY(-50%);
    color: white;
    background-color: black;
    font-size: 10px;
    padding: 0px 5px;
    font-family: var(--font-family-title);
  }
  ul :global(.next) {
    border: 1px solid black !important;
  }

  .tags {
    margin-top: 5px;
    display: flex;
    justify-content: flex-end;
    gap: 5px;
  }
  .badge {
    border-radius: 16px;
    border: 1px solid black;
    display: inline-block;
    font-size: 12px;
    padding: 1px 11px;
    background-color: white;
    color: black;
    font-family: var(--font-family-title);
    &[data-name*="$upporters"] {
      background-color: #fbe882;
    }
    &[data-name*="robinboob"] {
      background-color: #d1b3ff;
    }
    &[data-name*="beginners-friendly"] {
      background-color: #d3fed3;
    }
    &[data-name*="beginners_welcome"] {
      background-color: #f5c7d7;
    }
  }

  @media screen and (min-width: 700px) {
    li {
      display: flex;
    }

    date,
    time {
      min-width: 120px;
      width: 8%;
    }
    details {
      flex: 1;
    }
  }
</style>

<script>
  import "./LocalTime.ts";
  import "./DetailsToggle";
  import { findNextStream } from "./utils";
  const streams = [...document.querySelectorAll("[data-stream-slug]")].map(
    (streamLi) => ({
      element: streamLi,
      scheduled_at: new Date(
        streamLi.querySelector("time")!.getAttribute("datetime")!
      ),
    })
  );
  streams.forEach((stream) => {
    const streamTime = new Date(stream.scheduled_at);
    if (streamTime < new Date(Date.now())) {
      stream.element.classList.add("passed");
    }
  });
  const nextStream = findNextStream(streams);
  // TODO: fix type narrowing
  // @ts-expect-error
  nextStream?.element.classList.add("next");
</script>

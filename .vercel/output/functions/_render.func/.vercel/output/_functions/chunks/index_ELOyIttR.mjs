const id = "html-css-what-next/index.mdx";
						const collection = "posts";
						const slug = "html-css-what-next";
						const body = "\nimport ContentInProgress from \"../../../components/ContentInProgress.astro\";\n\n## Outgrowing HTML and CSS\n\nAfter building a few HTML pages, you may start to feel that your website dreams\nare slowed down by repeated tasks, or that you're looking for more fanciful\ninteractivity than you know how to build. Your struggles might include (or look\nsimilar to) these:\n\n- Keeping your layout consistent across pages without repeating code. For\n  example, you might want to automatically update your navigation on every page\n  without changing the HTML on each of them.\n- Automatically creating pages for each individual work in your galleries, or\n  filtering them according to their tags.\n- Allowing users to add their own content to your pages, be it in the form of a\n  guestbook, a comment section, or even likes on your posts.\n\nFirst of all, _congratulations!_ Your ambition is a sign of your growth as a\nwebsite weaver. At this point, for how intimidating that sounds, you might be\nready for the next step in web development: a foray into JavaScript-based tools,\nand (if you wish) programming.\n\n## So Many Pathways, So Little Time\n\nFirst, _bad news_: there's countless potential paths in front of you, which might\nfeel confusing and overwhelming. But–_good news!_–every developer's journey is\nunique (and rarely linear), and you're going to be fine no matter the steps you\nchoose to take.\n\nIn this article, we'll discuss my favorite options:\n\n1. The Static Site Generation Path (my reccommendation for fannish folks)\n2. The Play Around in the Browser Path\n3. The Server Path\n\nYou can choose one of them and follow it to the end, or you can jump around as\nyou wish. Some will find that the one that seemed most appealing doesn't\nend up being their favorite. Others might find the one that didn't turns\nout to be a lot of fun.\n\nRemember: if you don't like the choice you made, you can\ngo back and try a different one. Not only figuring out what you don't like is as\nvaluable as figuring out what you do, but all these choices build upon each\nother. No learning is ever wasted.\n\n> **NOTE:** If you're very ambitious, you might choose to start directly here, and\n> learn HTML and CSS as you go. While some might caution you against it, as a\n> fellow \"throwing myself off the deep end\" learner, I say: _don't let your\n> dreams be dreams!_ For you, the Static Site Generation Path might be the right\n> choice.\n\n### The Static Site Generation Path\n\nLet's say you like to produce content, _a lot of content_. This might look like\na website with many different pages, galleries with a lot of art, or even\nfrequent updates and improvements to your layout that need to be copy pasted on\neach page. Maybe you _even_ wish to start a blog. Static Site Generators are the\nperfect tool to tackle these challenges.\n\n**A Static Site Generator (SSG) is a program that, rather than have you write each\npage of your website by hand, stitches your files together and _generates_ those\npages for you.** For example, an SSG will allow you to:\n\n- Define your own `<Navigation />` tag to add wherever you want your navigation bar\n  to appear. The SSG will swap this tag with the HTML and CSS of your navigation.\n- Automatically add a new entry to your gallery for each image in a folder, making sure\n  you never accidentally forget to add a new `img` tag to your HTML.\n\n**In the end, an SSG will create the same HTML and CSS files you'd have written\nmanually**, without you having to repeat the same code over and over again.\nThese days, [the web (and me)'s most darling Static Site Generator is\nAstro](https://astro.build/). If their homepage seems too full of jargon and\noverwhelming for you, don't worry: you don't need to understand any of those\nwords to be able to use it.\n\n> **Note:** if you want to follow along my _live_ explanation of this path, you can [watch me\n> go through it on YouTube](https://youtu.be/LOs8DqEi2_s?si=W31BDVLQn73zKUp8).\n\n#### Installing Astro\n\nHere's how to get started:\n\n<details>\n  <summary>Click here to reveal the installation steps</summary>\n\n1. **Learn how to open you Terminal (command line) and navigate to a folder:** many\n   beginners (and some experts) are nervous about using the command line to run programs. In\n   reality, **you can start using the command line without learning _any_ command.** Windows' Terminal is\n   called PowerShell, and [you can open it in any folder by following this guide](https://adamtheautomator.com/windows-open-powershell-in-a-folder/#Opening_PowerShell_via_the_Address_Bar).\n   There are similar guides for [Mac](https://apple.stackexchange.com/questions/11323/how-can-i-open-a-terminal-window-directly-from-my-current-finder-location)\n   or [Linux](https://www.techrepublic.com/article/linux-101-how-to-quickly-open-a-terminal-in-a-specific-directory/).\n\n   > **NOTE:** if you'd really, _really_ like to avoid using a Terminal, I suggest you go through the\n   > [\"Play Around in the Browser\" path](#the-play-around-in-the-browser-path) instead. Just know I\n   > believe in you and your ability to master the command line!\n\n2. **Install NodeJS with Node Version Manager (NVM):** NodeJS allows you to run\n   JavaScript code on your computer (rather than in your browser). Astro, like\n   many other program, is written in JavaScript and needs NodeJS to run.\n   **Rather than installing NodeJS directly I suggest you use NVM\n   ([Windows](https://github.com/coreybutler/nvm-windows?tab=readme-ov-file#install-nvm-windows),\n   [others](https://github.com/nvm-sh/nvm)).** NVM will install NodeJS for you,\n   and allow you to switch between different versions whenever you need. It's a\n   handy tool that will help you later. After installing NodeJS, **you can now\n   run `npm` commands in your Terminal.**\n3. **Install (and play around with) Astro**: Astro has an excellent\n   [documentation website](https://docs.astro.build/) and a friendly Discord\n   server for when you get stuck. Currently (January 2024), **[the command to\n   create your Astro website](https://docs.astro.build/en/install/auto/) is `npm\ncreate astro@latest`.** Open your Terminal in the folder you want to create\n   your website in, run this command, answer some questions, and you're done!\n   Reopen your Terminal in the new folder (or `cd` into it) then run `npm run\ndev` to see your Astro website come to life.\n\n</details>\n\n#### Part 1: The Basics\n\nFrom here, here's how I suggest you approach learning how to use SSGs:\n\n- **[Make some new\n  pages](https://docs.astro.build/en/core-concepts/astro-pages/):** First, you\n  can create some HTML pages in your `src/pages/` folder to see that all you\n  know still works as you expect! Next, you can try creating some `.astro`\n  pages, and (if you're a fan of markdown) even some `.md` ones. Run `npm run\ndev` in your terminal to see a preview of these pages.\n- **[Learn how to `build` your\n  website](https://docs.astro.build/en/guides/deploy/#building-your-site-locally)**:\n  When you have made one or more pages, you can run `npm run build` to generate\n  your final HTML and CSS pages. Explore the files in the newly-created `dist/`\n  directory (in the same folder as your website) to see the code Astro built for\n  you!\n- **[Create a Component (without\n  Props)](https://docs.astro.build/en/core-concepts/astro-components/):** A\n  Component is a reusable tag you can add to any `.astro` page in place of\n  rewriting the same HTML. You can write _any_ component you wish, but if you\n  cannot choose the Astro documentation has [a tutorial that guides you through\n  creating a Navigation\n  Bar](https://docs.astro.build/en/tutorial/3-components/). Regardless of which\n  component you choose to build, this is a good time to dive into them!\n- **[Create your Layout](https://docs.astro.build/en/core-concepts/layouts/):**\n  A step up from simple components, creating a layout will allow you to easily\n  wrap the unique content of every page in the same HTML. The new concept you're\n  looking to explore here is [the `<slot />`\n  tag](https://docs.astro.build/en/core-concepts/astro-components/#slots). A\n  slot is a \"hole\" in the HTML of your component that allows you to insert more\n  HTML and CSS content within it. Think of wrapping the content unique to each\n  page in a `<Layout>` tag!\n- **[Create a Component (with\n  props)](https://docs.astro.build/en/core-concepts/astro-components/#component-props):**\n  props allow you to add custom attributes to Component tags you create! For\n  example, you might create a `Card` that allows you to display information\n  about your OCs, and use attributes for the data that changes between them,\n  like their names, images, and descriptions.\n\n#### Part 2: The slightly-less Basics\n\nAt this point, if you start feeling overwhelmed by the JavaScript required, it\nmight be worth temporarily switching to the [\"Play Around in the\nBrowser\"](#the-play-around-in-the-browser-path) path to beef up your skills.\nOnce you're comfortable with these (or if you like \"trials by fire\"), here's\nhow you might proceed:\n\n- **[Dynamic Routes](https://docs.astro.build/en/core-concepts/routing/#dynamic-routes):** Dynamic\n  routes allow you to automatically generate individual pages based on a list of\n  data. For example, continuing the OC example, you might create an individual\n  page for each character and make your OC card link to it. For a different take\n  on this, the [\"build a blog\" Astro\n  tutorial](https://docs.astro.build/en/tutorial/5-astro-api/) guides you\n  through automatically generating a blog from a series of markdown files in a\n  folder. My [guide to `getStaticPaths`](/posts/get-static-paths) might also help.\n- **[Content\n  Collections](https://docs.astro.build/en/guides/content-collections/#_top):**\n  This is my favorite Astro feature, and one of the main reasons I so highly\n  reccommend it. While this will require [some\n  TypeScript](#making-the-glompjump-to-typescript), you don't need to fully know\n  TypeScript to get benefits out of it. Long story short, content collections\n  allow you to store all your content in a `src/content/` folder, and make sure\n  that all content in a collection has the same structure. For example, a\n  content collection can help ensure that all your blogpost have a title, or all\n  your OCs have a favorite food. You can follow [Astro's Blog with Content\n  Collections\n  tutorial](https://docs.astro.build/en/tutorials/add-content-collections/#extending-the-blog-tutorial-with-content-collections)\n  to learn more about them.\n- **[Remark & Rehype Plugins](https://docs.astro.build/en/guides/markdown-content/#configuring-markdown-and-mdx):**\n  once again, one of my favorite features (not just of Astro). If you're writing your content\n  in markdown or MDX, you can install Remark and Rehype plugins to extend the\n  capabilities of your markdown. For example, I use them to automatically\n  generate the table of content in these pages, or to add emojis to my content\n  using the typical `:emoji:` shorthand :bobaparty::bobaparty::bobaparty:!\n\n#### Uploading your Website\n\nStatically Generated websites can be easily published to websites hosts like\nNeocities. After all, once you run `npm run build`, the content within your\n`dist/` folder will be the same HTML and CSS pages you'd have written by hand!\nIf you want to step up your game even further, you can [learn how to use Git +\nGitHub](#the-always-worth-it-regadless-of-path) to automatically upload your\nwebsite to the web whenever you create a new version.\n\n### The Play Around in the Browser Path\n\n<ContentInProgress />\n\nMaybe you want to try JavaScript, but aren't yet ready to commit to all that\ncomes with a more complex setup, like the one for static site generation. Maybe\nyou wish to build experiences that fit within a single page, but require more\ninteractivity or bell and whistles that HTML and CSS give you.\n\nLuckily, JavaScript is one of the simplest programming languages to get started with!\nAll you need is the same browser you've been reading this page with–at least if you're\non a desktop device!\n\nWhile I don't have time to flesh out this section, here's some very quick pointers for what to learn:\n\n- **Basic of code (variables, arrays, functions, objects):** You can [use your\n  browser\n  console](https://www.codecademy.com/article/running-javascript-in-the-browser-console)\n  to play around with JavaScript in an easily-interactive fashion! This is a\n  great way to quickly experiment with some programming basics. If you wish, I\n  have a [YouTube tutorial on these\n  basics](https://www.youtube.com/watch?v=0k3rIR2rp0o&list=PLhXpCwgI-5FIo4KHBNSsrGi78pLECCe7Z&index=5).\n  Just be mindful that [this tutorial uses\n  TypeScript](#making-the-glompjump-to-typescript), which doesn't work directly\n  in the browser console. However, all that is discussed works exactly the same for JavaScript (minus\n  type annotations).\n- **Logging values to console:** This is invaluable for debugging, especially as a beginner. I suggest learning about both\n  `console.log` and `console.dir` (with the `{ depth: null }` option). Use them freely and with abandon!\n- **DOM manipulation:** What good is JavaScript if you don't know how to use it\n  to change the look of your website? Learn about\n  [`querySelector`](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Manipulating_documents#active_learning_basic_dom_manipulation)\n  and [adding children to elements](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Client-side_web_APIs/Manipulating_documents#creating_and_placing_new_nodes), and get manipulating!\n- **JavaScript event handlers:** Reacting to browser events is what JavaScript\n  is all about! [Learning all you can about\n  `addEventListener`](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events)\n  will quickly set you on the path to mastery!\n\nGiven the lack of time, I'll leave you with another of my posts in place of task\nexamples: [how to come up with good projects to improve your programming\nskills](https://essential-randomness.tumblr.com/post/677309777029824512/dear-ms-boba-how-do-you-go-from-having-general).\n\n### The Saving Data on the Server Path\n\n<ContentInProgress />\n\nDo you want to interact with other websites and applications (like Discord), or\nstore and retrieve \"user-generated data\" (like comments)? Then learning about server-side\nprogramming might be the thing for you!\n\nOne again, there's many routes to learn about this topic. While I don't have\ntime to flesh out this section, here's some very quick pointers for what to\nlearn:\n\n- **[Install Astro](#installing-astro):** While Astro is mainly a Static Site\n  Generator, it's also an incredibly quick and easy way to get a server up and\n  running!\n- **[Enable \"server\n  mode\"](https://docs.astro.build/en/core-concepts/rendering-modes/#on-demand-rendered):**\n  As I said, you can easily get access to a server with Astro!\n- **Watch [my video on using forms and\n  webhooks](https://www.twitch.tv/videos/2026880997):** Forms are your portal\n  between the client (what you see on your browser) and the server (where data\n  gets processed). You can also learn about [API endpoints in\n  Astro](https://docs.astro.build/en/core-concepts/endpoints/#server-endpoints-api-routes).\n- **Learn SQLite:** While I don't have content specifically about this yet, I\n  can reccommend [Turso](https://turso.tech/) as a way to get access to a free\n  SQLite DB to experiment with.\n\n**Important:** You cannot host websites that need a server on Neocities. [Astro's website has\na few handy suggestions for you](https://docs.astro.build/en/guides/deploy/). You will need to\nchoose one that supports SSR. This is a good time to learn [about using Version Control](#the-always-worth-it-regadless-of-path).\n\n### The \"Always Worth it, Regadless of Path\"\n\n<ContentInProgress />\n\n- **Learn Git & GitHub:** Once again, Git + GitHub have been voted \"most useful\n  skill that I would not have learned on my own\" by our beginner friends in\n  Fandom Coders! They're also [the topic of my very first\n  livestream](https://www.youtube.com/watch?v=PMVw63yvY7U&list=PLhXpCwgI-5FIo4KHBNSsrGi78pLECCe7Z&index=1).\n  If you want hot fictional characters to help you learn this skill, [follow our\n  progress on FujoGuide Volume 0](https://www.fujoweb.dev/)!\n- **Switch to a professional code editor:** The default choice these days is\n  [the excellent VSCode](https://code.visualstudio.com/docs/introvideos/basics)!\n\n## Next Up on Your Journey: Trial and Error, Mix and Match\n\nThese paths just give you an idea of what's possible, but remember: you don't\nneed to follow them linearly. Jump in and out and see which one you vibe with!\nIf you start feeling discouraged, try attacking JavaScript from a different side. The\nbest way to learn is to [build a project that's just a bit outside of your comfort\nzone](https://essential-randomness.tumblr.com/post/677309777029824512/dear-ms-boba-how-do-you-go-from-having-general).\n\nWhile the road to mastering these abilities won't be simple, I know that if\nyou stick with it you'll find yourself making progress quicker than you think,\nearlier than you think. **If you ever feel like there's no way you'll ever \"get it\",\ndon't despair: that's just how programming feels like sometimes!**\n\nYou can always reach out to me on my socials or [during streams](https://www.twitch.tv/essentialrandomness) with any question.\n\n## Making the ~~Glomp~~Jump to TypeScript\n\nAs you go through this journey, you will sometimes hear about TypeScript. For the most\npart, you don't need to worry about it: JavaScript code is also valid TypeScript\ncode. **Wherever you can write TypeScript, you can write JavaScript (but not vice versa)**,\nwith maybe just a few red squiggles in your editor to keep you on your toes.\n\nWhat TypeScript adds on top of JavaScript is the ability to know for sure what\ntype of value your variables contain, and what values your functions accept and\ngive back. While TypeScript can be scary, it's yet another step forward that can\nhelp you become a better and more efficient programmer. Thanks to TypeScript,\nyou can write more and more complex programs without spending as much time\ndebugging them or looking up references.\n\n<figure>\n  <iframe\n    width=\"420\"\n    height=\"315\"\n    src=\"https://www.youtube.com/embed/6pDH66X3ClA\"\n  />\n  <figcaption>\n    TypeScript suffering as JavaScript revels in its lack of type safety.\n  </figcaption>\n</figure>\n\nUnfortunately, there isn't a lot of great beginners friendly material to recommend.\nAs mentioned, [I went through TypeScript basics in this video](https://www.youtube.com/watch?v=0k3rIR2rp0o&list=PLhXpCwgI-5FIo4KHBNSsrGi78pLECCe7Z&index=5).\nHopefully, I'll get to publish more content about it soon!\n\nHave a fun journey!\n\n<style>{`\nfigure {\n    text-align: center;\n}\nfigcaption {\n    margin-top: 5px;\n    text-size: small;\n    color: gray;\n}\n`}</style>\n";
						const data = {title:"I made some pages in HTML and CSS, now what?",tagline:"How to build an indie website that grows with you",created_at:new Date(1705420799000),unlisted:false,tags:[],og_description:"Have you learned some HTML and CSS but feel like the website of your dreams (with a blog! a fancy gallery! a comments section!) is out of your reach? Here's a few options for your next steps!",status:"pre-beta"};
						const _internal = {
							type: 'content',
							filePath: "/Users/essentialrandomness/projects/programming/essential-random/src/content/posts/html-css-what-next/index.mdx",
							rawData: "\ntitle: I made some pages in HTML and CSS, now what?\ntagline: How to build an indie website that grows with you\ncreated_at: 2024-01-16 15:59:59\nstatus: pre-beta\nog_description: |\n  Have you learned some HTML and CSS but feel like the website\n  of your dreams (with a blog! a fancy gallery! a comments section!) is out of\n  your reach? Here's a few options for your next steps!",
						};

export { _internal, body, collection, data, id, slug };
